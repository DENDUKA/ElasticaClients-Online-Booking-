@model ElasticaClients.Models.TrainingItemModel

@{
	ViewBag.Title = "Create";
	int trainingid = Convert.ToInt32(Request.QueryString["trainingid"]);
	var t = ElasticaClients.DAL.Data.TrainingDAL.Get(trainingid);
	string startTimeFormat = $"{ElasticaClients.Models.ModelHelper.GetTimeFormat(t.StartTime)} {t.Name}";
}

<h2>Запись пользователя</h2>

@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()

<div class="form-horizontal">
	<hr />
	@Html.ValidationSummary(true, "", new { @class = "text-danger" })

	<div class="form-group">
		@Html.LabelFor(model => model.TrainingId, htmlAttributes: new { @class = "control-label col-md-2" })
		<div class="col-md-9">
			<input class="form-control" disabled value="@startTimeFormat" />
			@Html.HiddenFor(model => model.TrainingId, new { htmlAttributes = new { @class = "form-control" } })
			@Html.ValidationMessageFor(model => model.TrainingId, "", new { @class = "text-danger" })
		</div>
	</div>

	<div class="form-group">
		@Html.LabelFor(model => model.AccountId, htmlAttributes: new { @class = "control-label col-md-3" })
		<div class="col-md-9">
			<div class="row-fluid">
				@Html.DropDownListFor(model => model.AccountId, ElasticaClients.Logic.AccountB.ToSelectListItems(), new { id = "accs", @class = "selectpicker", data_show_subtext = "true", data_live_search = "true" })
			</div>
			@Html.ValidationMessageFor(model => model.AccountId, "", new { @class = "text-danger" })
		</div>
	</div>

	@Html.HiddenFor(model => model.Razovoe)
	@Html.HiddenFor(model => model.ServisesList)	

	<hr />
	<h4>Комплексы :</h4>

	<table>

		@foreach (var item in ElasticaClients.Models.ServisesHelper.СomplexesName)
		{
			<tr>
                <td>
                    <label for="@item.Key" style="margin:0">@item.Value</label>
                    <input id="@item.Key" type="checkbox" value="false" onchange="ComplexChanged(this)" />
                    @ElasticaClients.Models.ServisesHelper.СomplexesPrice[item.Key]
                </td>				
			</tr>
            <tr>
                <td>
                    <label for="@item.Key" style="margin:0">
                        (@String.Join(", ", ElasticaClients.Models.ServisesHelper.ServisesInComplexNames(item.Key)))
                    </label>
                </td>
            </tr>
		}
	</table>

	<hr />
	<h4>Услуги :</h4>

	<table>

		@foreach (var item in ElasticaClients.Models.ServisesHelper.ServisesName)
		{
			<tr>
				<td><label for="@item.Key">@item.Value</label></td>
				<td>
					<input id="@item.Key" type="checkbox" value="false" onchange="ServiceChanged(this)" />
				</td>
				<td>
					@ElasticaClients.Models.ServisesHelper.ServisesPrice[item.Key]
				</td>
			</tr>
		}
	</table>

	<div class="form-group">
		<label class="control-label col-md-2">Итог </label>
		<div class="col-md-9">
			<input class="form-control" id="cost" disabled="" value="0">
		</div>
	</div>

	<div class="form-group">
		@Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "control-label col-md-3" })
		<div class="col-md-9">
			@Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control", @onchange = "RecalculateCost()" } })
			@Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
		</div>
	</div>

	<div class="form-group">
		<div id="accstat"></div>
	</div>

	<div class="btn-group" role="group">
		<button type="submit" value="Create" class="btn btn-success">Создать</button>
		<button type="button" class="btn btn-secondary" onclick="location.href='@Url.Action("Details", "Training", new { id = @trainingid })'">Назад</button>
	</div>
</div>
}

<script type="text/javascript">
	const servisesIds = [@Html.Raw(ElasticaClients.Models.ServisesHelper.GetServiserIdsString())];
	const complexesIds = [@Html.Raw(ElasticaClients.Models.ServisesHelper.GetComplexesIdsString())];

	const servisesInComplexesIds = @Html.Raw(Json.Encode(ElasticaClients.Models.ServisesHelper.СomplexesInclude))
	const complexesCostIds = @Html.Raw(Json.Encode(ElasticaClients.Models.ServisesHelper.СomplexesPrice))
	const servisesCostIds = @Html.Raw(Json.Encode(ElasticaClients.Models.ServisesHelper.ServisesPrice))

	function ComplexChanged(complex) {

		var element = $(complex);
		var isChecked = element.prop('checked');

		UncheckAllComplexes();

		if (isChecked) {
			CheckListServises(servisesInComplexesIds[element.attr('id')]);
			element.prop("checked", true);
		} else {
			UncheckListServises(servisesInComplexesIds[element.attr('id')]);
			element.prop("checked", false);
		}

		RecalculateCost();
	}

	function ServiceChanged(service) {
		var s = $(service);
		var id = s.attr('id');

		selectedComplex = GetSelectedCommplex();

		if (!s.prop('checked')) {
			if (selectedComplex != null && servisesInComplexesIds[selectedComplex].includes(id)) {
				$("#" + selectedComplex).prop("checked", false);
			}
		}

		RecalculateCost();
	}

	function RecalculateCost() {
		var selectedComplex = null;
		var cost = 0;

		selectedComplex = GetSelectedCommplex();

		if (selectedComplex != null) {
			cost = cost + complexesCostIds[selectedComplex];
		}

		servisesIds.forEach((e) => {
			if ($("#" + e).prop('checked')) {
				if (selectedComplex != null && servisesInComplexesIds[selectedComplex].includes(e)) {
				}
				else {
					cost = cost + servisesCostIds[e];
				}
			}
		})

		var discount = $("#Discount").prop("value");
		$("#cost").prop("value", cost * (100 - discount) / 100);

		FillCheckedServisesList();
	}

	function FillCheckedServisesList() {

		var servList = $("#ServisesList");
		var checkedServises = "";

		complexesIds.forEach((e) => {
			if ($("#" + e).prop('checked')) {
				if (checkedServises == "") {
					checkedServises = e;
				}
				else {
					checkedServises = checkedServises + " " + e;
				}
			}
		})

		servisesIds.forEach((e) => {
			if ($("#" + e).prop('checked')) {
				if (checkedServises == "") {
					checkedServises = e;
				}
				else {
					checkedServises = checkedServises + " " + e;
				}
			}
		})

		servList.prop("value", checkedServises);
	}

	function GetSelectedCommplex() {
		var selected = null;

		complexesIds.forEach((e) => {
			if ($("#" + e).prop('checked')) {
				selected = e;
			}
		})

		return selected;
	}

	function UncheckAllComplexes() {
		complexesIds.forEach(function (e) {
			if ($("#" + e).prop('checked')) {
				UncheckListServises(servisesInComplexesIds[e]);
			}

			$("#" + e).prop("checked", false);
		});
	}

	function CheckListServises(servisesList) {
		servisesList.forEach(e => $("#" + e).prop("checked", true));
	}

	function UncheckListServises(servisesList) {
		servisesList.forEach(e => $("#" + e).prop("checked", false));
	}

	function FillCheckedFromController() {

		$("#ServisesList").prop('value').split(' ').forEach((e) => {
			$("#" + e).prop('checked', true);
		})
	}

	$(document).ready(function () {
		FillCheckedFromController();
		RecalculateCost();
	});
</script>