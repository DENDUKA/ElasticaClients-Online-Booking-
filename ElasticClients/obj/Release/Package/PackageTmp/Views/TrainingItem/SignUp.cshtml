@model ElasticaClients.Models.TrainingItemModel

@{
	ViewBag.Title = "Create";
	int trainingid = Convert.ToInt32(Request.QueryString["trainingid"]);
	var t = ElasticaClients.DAL.Data.TrainingDAL.Get(trainingid);
	string startTimeFormat = $"{ElasticaClients.Models.ModelHelper.GetTimeFormat(t.StartTime)} {t.Name}";
}

<h2>Запись пользователя</h2>

@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()

	<div class="form-horizontal">
		<hr />
		@Html.ValidationSummary(true, "", new { @class = "text-danger" })

		<div class="form-group">
			@Html.LabelFor(model => model.TrainingId, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-9">
				<input class="form-control" disabled value="@startTimeFormat" />
				@Html.HiddenFor(model => model.TrainingId, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.TrainingId, "", new { @class = "text-danger" })
			</div>
		</div>

		<div hidden>
			<div class="form-group">
				@Html.LabelFor(model => model.AccountId, htmlAttributes: new { @class = "control-label col-md-3" })
				<div class="col-md-9">
					<div class="row-fluid">
						@Html.DropDownListFor(model => model.AccountId, ElasticaClients.Logic.AccountB.ToSelectListItems(), new { id = "accs", @class = "selectpicker", data_show_subtext = "true", data_live_search = "true" })
					</div>
					@Html.ValidationMessageFor(model => model.AccountId, "", new { @class = "text-danger" })
				</div>
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Razovoe, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-9">
				@Html.EditorFor(model => model.Razovoe, new { htmlAttributes = new { @class = "form-control col-md-1" } })
				@Html.ValidationMessageFor(model => model.Razovoe, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.RazovoeCost, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-9">
				<div id="RazovoeCost">
					@Html.DisplayFor(model => model.RazovoeCost)
				</div>
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.SubscriptionId, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-9">
				@Html.DropDownList("SubscriptionId", new List<SelectListItem>(), new { id = "subs", @class = "form-control" })
				@Html.ValidationMessageFor(model => model.SubscriptionId, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			<div id="accstat"></div>
		</div>



		<div class="btn-group" role="group">
			<button type="submit" value="Create" class="btn btn-success">Записаться</button>
			<button type="button" class="btn btn-secondary" onclick="location.href='@Url.Action("Details", "Training", new { id = @trainingid })'">Назад</button>
		</div>
	</div>
}

<script type="text/javascript">
    $(function (){
        $('#accs').change(function(){
            // получаем выбранный id
            var id = $(this).val();
            $.ajax({
                type: 'GET',
				url: '@Url.Action("_GetSubscriptionsForAccount")/?accId=' + id + '&branchId=' + @t.Gym.BranchId.ToString(),
				success: function(data) {
					$('#subs').replaceWith(data);
                }
			});
		});

		$('#Razovoe').change(function () {
			var obj = $(this);
			var value = obj.is(":checked");

			var sub = $('#subs').parent().parent();
			var cost = $('#RazovoeCost').parent().parent();
			var istrial = $('#IsTrial').parent().parent();

			if (value) {
				sub.hide();
				cost.show();
				istrial.show();

			} else {
				sub.show();
				cost.hide();
				istrial.hide();
			}

			console.log(value);
        });
    })

    $(document).ready(function () {
		$('#accs').change();
		$('#Razovoe').change();
    });
</script>